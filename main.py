import pandas as pd
import pickle
import streamlit as st
import my_funcs as fn
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import random
from streamlit_option_menu import option_menu


df=pd.read_csv('df.csv')
df_RFM=pd.read_csv('df_now.csv')
df_RFM_TapLuat=pd.read_csv('df_RFM_TapLuat.csv')
df_now=df_RFM.copy()
scaled_data=pd.read_csv('scaled_data.csv')

model = pickle.load(open('customer_segmentation_model.sav', 'rb'))
gmm_model=pickle.load(open('gmm_model.pkl', 'rb'))

df_now=fn.gan_nhan_cum_cho_khach_hang(df_now,model)
rfm_agg2=fn.tinh_gia_tri_tb_RFM(df_now)
df_merged = pd.merge(df, df_now, left_on='Member_number', right_index=True, how='inner')
customers=fn.get_list_customers(df)
random_customers = customers.sample(n=3, random_state=40)

# -----------------------------------------------------------------------------------
menu = ["Trang ch·ªß", "Y√™u c·∫ßu c·ªßa doanh nghi·ªáp","C√°c thu·∫≠t to√°n th·ª≠ nghi·ªám", "L·ª±a ch·ªçn k·∫øt qu·∫£","·ª®ng d·ª•ng ph√¢n nh√≥m"]
with st.sidebar:
    selected = option_menu("Menu ch√≠nh", menu, 
        icons=['house', '1-square', '2-square','3-square','4-square'], menu_icon="cast", default_index=0)
    
if selected == "Trang ch·ªß":
    st.markdown("<h1 style='text-align: center;'>ƒê·ªì √Ån T·ªët Nghi·ªáp<br>Data Science & Machine Learning</h1>", unsafe_allow_html=True)    
    st.markdown("<h2 style='text-align: center;font-weight: bold; color: blue'>ƒê·ªÅ t√†i: Ph√¢n nh√≥m kh√°ch h√†ng</h2>", unsafe_allow_html=True)
    st.image('images/h3_1.png')
elif selected=="Y√™u c·∫ßu c·ªßa doanh nghi·ªáp":
    st.image('images/CuaHang.png')
    st.write("")
    st.write(
        '''
        ##### Kh√°i qu√°t v·ªÅ c·ª≠a h√†ng:
        - C·ª≠a h√†ng X ch·ªß y·∫øu b√°n c√°c s·∫£n ph·∫©m thi·∫øt y·∫øu cho kh√°ch h√†ng nh∆∞ rau, c·ªß, qu·∫£, th·ªãt, c√°, tr·ª©ng, s·ªØa, n∆∞·ªõc gi·∫£i kh√°t...
        - Kh√°ch h√†ng c·ªßa c·ª≠a h√†ng l√† kh√°ch h√†ng mua l·∫ª.
        ''')   
    st.write(
        '''
        ##### Mong mu·ªën c·ªßa c·ª≠a h√†ng:
        - Ch·ªß c·ª≠a h√†ng X mong mu·ªën c√≥ th·ªÉ b√°n ƒë∆∞·ª£c nhi·ªÅu h√†ng h√≥a h∆°n
        - Gi·ªõi thi·ªáu s·∫£n ph·∫©m ƒë·∫øn ƒë√∫ng ƒë·ªëi t∆∞·ª£ng kh√°ch h√†ng, chƒÉm s√≥c v√† l√†m h√†i l√≤ng kh√°ch h√†ng
        ''')
    st.write(
        '''
        ##### Y√™u c·∫ßu ƒë∆∞a ra:
        - T√¨m ra gi·∫£i ph√°p gi√∫p c·∫£i thi·ªán hi·ªáu qu·∫£ qu·∫£ng b√°, t·ª´ ƒë√≥ gi√∫p tƒÉng doanh thu b√°n h√†ng, c·∫£i thi·ªán m·ª©c ƒë·ªô h√†i l√≤ng c·ªßa kh√°ch h√†ng.
        ''')
    st.write(
        '''
        ##### M·ª•c ti√™u/ v·∫•n ƒë·ªÅ:
        - X√¢y d·ª±ng h·ªá th·ªëng ph√¢n nh√≥m kh√°ch h√†ng d·ª±a tr√™n c√°c th√¥ng tin do c·ª≠a h√†ng cung c·∫•p t·ª´ ƒë√≥ c√≥ th·ªÉ gi√∫p c·ª≠a h√†ng x√°c ƒë·ªãnh c√°c nh√≥m kh√°ch h√†ng kh√°c nhau ƒë·ªÉ c√≥ chi·∫øn l∆∞·ª£c kinh doanh, chƒÉm s√≥c kh√°ch h√†ng ph√π h·ª£p
        ''')
elif selected=="C√°c thu·∫≠t to√°n th·ª≠ nghi·ªám":
    tab1, tab2, tab3 = st.tabs(["T·∫≠p Lu·∫≠t", "Thu·∫≠t to√°n GMM", "Thu·∫≠t to√°n KMeans"])
    with tab1:
        st.write("### T·∫≠p Lu·∫≠t chia l√†m 5 nh√≥m")
        df_RFM_TapLuat.rename(columns={'RFM_Level': 'Cluster'}, inplace=True)
        df_RFM_TapLuat['ClusterName']=df_RFM_TapLuat['Cluster']

        rfm_agg3=fn.tinh_gia_tri_tb_RFM(df_RFM_TapLuat)
        st.write("**T√≠nh gi√° tr·ªã trung b√¨nh RFM cho c√°c nh√≥m**")
        st.markdown(fn.format_table(rfm_agg3).to_html(), unsafe_allow_html=True)
        fn.ve_cac_bieu_do(rfm_agg3,df_RFM_TapLuat,st,'T·∫≠p lu·∫≠t')        
    with tab2:
        st.write("### GMM chia l√†m 8 nh√≥m")
        df_RFM['Cluster'] = gmm_model.predict(scaled_data)
        df_RFM['ClusterName'] = df_RFM['Cluster'].apply(lambda x: f'Cluster {x}')    

        rfm_agg=fn.tinh_gia_tri_tb_RFM(df_RFM)
        st.write("**T√≠nh gi√° tr·ªã trung b√¨nh RFM cho c√°c nh√≥m**")
        st.markdown(fn.format_table(rfm_agg).to_html(), unsafe_allow_html=True)
        fn.ve_cac_bieu_do(rfm_agg,df_RFM,st,'GMM')        
    with tab3:
        st.write("### KMeans v·ªõi k=5 ,chia l√†m 5 nh√≥m")
        st.write("**T√≠nh gi√° tr·ªã trung b√¨nh RFM cho c√°c nh√≥m**")
        st.markdown(fn.format_table(rfm_agg2).to_html(), unsafe_allow_html=True)  
        fn.ve_cac_bieu_do(rfm_agg2,df_now,st,'KMeans')
elif selected=="L·ª±a ch·ªçn k·∫øt qu·∫£":
    st.markdown("<h2 style='text-align: center;'>Ch·ªçn thu·∫≠t to√°n KMeans ƒë·ªÉ l√†m th·ª≠ nghi·ªám ph√¢n nh√≥m kh√°c h√†ng</h2>", unsafe_allow_html=True) 
    st.subheader('S·ª≠ d·ª•ng k=5 -> Chia th√†nh 5 nh√≥m')   
    
    tab1, tab2 = st.tabs(["Bi·ªÉu ƒë·ªì", "Top 3 s·∫£n ph·∫©m/nh√≥m s·∫£n ph·∫©m"])
    with tab1:
        st.write("")
        st.write('#### 1. T√≠nh gi√° tr·ªã trung b√¨nh RFM cho c√°c nh√≥m')
        st.markdown(fn.format_table(rfm_agg2.head()).to_html(), unsafe_allow_html=True)

        st.write("")
        st.write('#### 2. C√°c bi·ªÉu ƒë·ªì')
        fn.ve_cac_bieu_do(rfm_agg2,df_now,st,'KMeans')

        # V√≠ d·ª• s·ª≠ d·ª•ng v·ªõi top 3 s·∫£n ph·∫©m ∆∞a th√≠ch
        behavior_table = df_merged.groupby('ClusterName').apply(lambda group: fn.get_top_products_info(group, df_merged, top_n=3))
        behavior_table=behavior_table.droplevel(level=1)
        behavior_table=behavior_table.reset_index()
    with tab2:
        st.write('#### 3. Top 3 s·∫£n ph·∫©m/nh√≥m s·∫£n ph·∫©m ∆∞a th√≠ch nh·∫•t c·ªßa m·ªói nh√≥m')
        behavior_table['Top3_Popular_Products'] = behavior_table['Top3_Popular_Products'].apply(lambda x: '<br>'.join(x.split(',')))
        behavior_table['Top_3_Popular_Category'] = behavior_table['Top_3_Popular_Category'].apply(lambda x: '<br>'.join(x.split(',')))    
        st.markdown(fn.format_table(behavior_table.head()).to_html(), unsafe_allow_html=True)    

        st.write("##### Gi·∫£i th√≠ch ClusterName:")
        fn.giai_thich_ClusterName(st)
elif selected=="·ª®ng d·ª•ng ph√¢n nh√≥m":
    st.write('### D·ª± ƒëo√°n ph√¢n nh√≥m kh√°ch h√†ng üí°')      
    status = st.radio("**Ch·ªçn c√°ch nh·∫≠p th√¥ng tin kh√°ch h√†ng:**", ("Nh·∫≠p id kh√°ch h√†ng l√† th√†nh vi√™n c·ªßa c·ª≠a h√†ng:", "Nh·∫≠p RFM c·ªßa kh√°ch h√†ng:","Upload file:"))
    st.write(f'**{status}**')
    if status=="Nh·∫≠p id kh√°ch h√†ng l√† th√†nh vi√™n c·ªßa c·ª≠a h√†ng:":
        selected_cus=fn.select_one_customers_by_id(customers,df_merged,False,st)
    elif status=='Nh·∫≠p RFM c·ªßa kh√°ch h√†ng:':        
        fn.select_one_customers_by_RFM(df_merged,model,st)
    elif status=='Upload file:':
        st.subheader("File Uploader")
        file = st.file_uploader("Ch·ªçn file", type=["csv", "txt"])
        if file is not None:
            cus_random = pd.read_csv(file)
            cus_random_temp=cus_random.copy()            
            cus_random_temp = cus_random_temp.drop(columns=['Member_number'])
            cus_random_temp=fn.gan_nhan_cum_cho_khach_hang(cus_random_temp,model,True)
            cus_random=cus_random.merge(cus_random_temp,how='left')
            st.subheader('B·∫£ng ph√¢n nh√≥m danh s√°ch kh√°ch h√†ng üéâ')
            st.markdown(fn.format_table(cus_random).to_html(), unsafe_allow_html=True)
        else:
            st.write("Vui l√≤ng ch·ªçn file.")

#-------------------------------------------------------------
st.sidebar.subheader("üìí Nh√≥m th·ª±c hi·ªán:")
st.sidebar.write("* Nguy·ªÖn Tu·∫•n Anh")   
st.sidebar.write("* Phan Ng·ªçc Ph∆∞∆°ng B·∫Øc") 
st.sidebar.subheader("üë©‚Äçüè´ Gi·∫£ng vi√™n:")   
st.sidebar.write("- C√¥ Khu·∫•t Th√πy Ph∆∞∆°ng")
st.sidebar.write("**üìÜ Ng√†y b√°o c√°o: 13/04/2025**")    




